import kotlin.Boolean;
import kotlin.Long;
import kotlin.String;
import kotlin.Int;
import kotlin.Float;
import kotlinx.serialization.descriptors.PrimitiveKind.INT;

CREATE TABLE
IF NOT EXISTS download(
chapter_id INTEGER NOT NULL PRIMARY KEY,
book_id INTEGER NOT NULL,
priority INTEGER AS Int NOT NULL,
FOREIGN KEY(chapter_id)
REFERENCES chapter(_id) ON UPDATE NO ACTION ON DELETE CASCADE );


findAll:
SELECT download.*, book._id, book.title, chapter.url, chapter.name, chapter.scanlator,book.source, chapter.content IS NOT "" AS is_downloaded
FROM download
JOIN book ON download.book_id = book._id
JOIN chapter ON download.chapter_id = chapter._id;


findDownloadWithInfo:
SELECT download.*, book._id, book.title, chapter.url, chapter.name, chapter.scanlator
FROM download
JOIN book ON download.book_id = book._id
JOIN chapter ON download.chapter_id = chapter._id;

insert:
INSERT INTO download(chapter_id, book_id, priority)
VALUES (:chapterId, :bookId, :priority);

selectChanges:
SELECT changes();

updatePriority:
UPDATE download
SET
    priority = :priority
WHERE chapter_id = :chapterId OR book_id = :bookId;

deleteByChapterId:
DELETE FROM download WHERE chapter_id = :chapter_id;

deleteByBookId:
DELETE FROM download WHERE book_id = :book_id;

deleteAll:
DELETE FROM download;