import kotlin.Boolean;
import kotlin.Long;
import kotlin.String;
import kotlin.Int;
import kotlin.Float;

import ireader.core.source.model.Page;
import kotlin.collections.List;

CREATE TABLE IF NOT EXISTS chapter(
    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT ,
    book_id INTEGER NOT NULL,
    url TEXT NOT NULL,
    name TEXT NOT NULL,
    scanlator TEXT,
    read INTEGER AS Boolean NOT NULL,
    bookmark INTEGER AS Boolean NOT NULL,
    last_page_read INTEGER NOT NULL,
    chapter_number REAL AS Float NOT NULL,
    source_order INTEGER NOT NULL,
    date_fetch INTEGER AS Long NOT NULL,
    date_upload INTEGER AS Long NOT NULL,
    content TEXT AS List<Page> NOT NULL ,
    type INTEGER AS Long NOT NULL,
    FOREIGN KEY(book_id) REFERENCES book (_id)
    ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS chapters_manga_id_index ON chapter(book_id);
CREATE INDEX IF NOT EXISTS chapters_unread_by_manga_index ON chapter(book_id, read) WHERE read = 0;

getChapterById:
SELECT *
FROM chapter
WHERE _id = :id;

findAll:
SELECT * FROM chapter;
findInLibrary:
SELECT chapter._id,book_id,chapter.url,name,scanlator,read,bookmark, last_page_read,chapter_number,source_order,date_fetch,date_upload,content,type
        FROM chapter
               LEFT JOIN book ON book._id == chapter.book_id
        GROUP BY chapter._id
        HAVING book.favorite = 1;
getChaptersByMangaId:
SELECT *
FROM chapter
WHERE book_id = :mangaId;

getChapterByUrl:
SELECT *
FROM chapter
WHERE url = :chapterUrl;

getChapterByUrlAndMangaId:
SELECT *
FROM chapter
WHERE url = :chapterUrl
AND book_id = :mangaId;

removeChaptersWithIds:
DELETE FROM chapter
WHERE _id IN :chapterIds;

insert:
INSERT INTO chapter(book_id,url,name,scanlator,read,bookmark,last_page_read,chapter_number,source_order,date_fetch,date_upload,content,type)
VALUES (:mangaId,:url,:name,:scanlator,:read,:bookmark,:lastPageRead,:chapterNumber,:sourceOrder,:dateFetch,:dateUpload,:content,:type);

selectChanges:
SELECT changes();

update:
UPDATE chapter
SET book_id = coalesce(:mangaId, book_id),
    url = coalesce(:url, url),
    name = coalesce(:name, name),
    scanlator = coalesce(:scanlator, scanlator),
    read = coalesce(:read, read),
    bookmark = coalesce(:bookmark, bookmark),
    last_page_read = coalesce(:lastPageRead, last_page_read),
    chapter_number = coalesce(:chapterNumber, chapter_number),
    source_order = coalesce(:sourceOrder, source_order),
    date_fetch = coalesce(:dateFetch, date_fetch),
    date_upload = coalesce(:dateUpload, date_upload)
WHERE _id = :chapterId;


delelteAllChapters:
DELETE FROM chapter;

deleteChaptersByBookId:
DELETE FROM chapter WHERE book_id = :bookId;

delete:
DELETE FROM chapter WHERE _id = :chapterId;

getLastChapter:
SELECT chapter._id,book_id,url,name,scanlator,read,bookmark, last_page_read,chapter_number,source_order,date_fetch,date_upload,content,type
        FROM chapter
               LEFT JOIN history ON history.chapter_id == chapter._id
        GROUP BY chapter._id
        HAVING chapter.book_id == :bookId AND history.last_read != 0
        ORDER BY last_read DESC
        LIMIT 1;

selectLastInsertedRowId:
SELECT LAST_INSERT_ROWID() AS Long;



